// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using orphan.Data.SqlServer;

#nullable disable

namespace orphan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240317030133_Orphan1")]
    partial class Orphan1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("orphan.Core.Model.AnnualReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ambitious")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewOrphanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NewOrphanId");

                    b.ToTable("AnnualReport");
                });

            modelBuilder.Entity("orphan.Core.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("orphan.Core.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("orphan.Core.Model.DataReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewOrphanId")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewOrphanId");

                    b.HasIndex("UserId");

                    b.ToTable("DataReview");
                });

            modelBuilder.Entity("orphan.Core.Model.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directorate");
                });

            modelBuilder.Entity("orphan.Core.Model.GuardianAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewOrphanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewOrphanId");

                    b.ToTable("GuardianAttachment");
                });

            modelBuilder.Entity("orphan.Core.Model.MonthlyMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("int");

                    b.Property<int>("NewOrphanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NewOrphanId");

                    b.ToTable("MonthlyMovement");
                });

            modelBuilder.Entity("orphan.Core.Model.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("orphan.Core.Model.NewOrphan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmountOfQuran")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AmountRent")
                        .HasColumnType("float");

                    b.Property<string>("CausesDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Classroom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosestPlaceOtLive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DMotherWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFatherDeath")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("EducationalLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FatherNationalNumber")
                        .HasColumnType("int");

                    b.Property<string>("FatherWorkBeforeDeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuardianNationalNumber")
                        .HasColumnType("int");

                    b.Property<string>("GuardianWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HousingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IamgeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsideOrphanage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherNationalNumber")
                        .HasColumnType("int");

                    b.Property<string>("NameOrphan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberRoom")
                        .HasColumnType("int");

                    b.Property<string>("OrphanClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrphanHobby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrphanStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualityHousing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipWithOrphanhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.Property<string>("healthStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("numberBrothers")
                        .HasColumnType("int");

                    b.Property<int?>("numberSisters")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VillageId");

                    b.ToTable("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.OrphanAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NewOrphanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NewOrphanId");

                    b.ToTable("OrphanAttachment");
                });

            modelBuilder.Entity("orphan.Core.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("orphan.Core.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Validity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("orphan.Core.Model.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Village");
                });

            modelBuilder.Entity("orphan.Core.Model.AnnualReport", b =>
                {
                    b.HasOne("orphan.Core.Model.NewOrphan", "NewOrphan")
                        .WithMany("AnnualReport")
                        .HasForeignKey("NewOrphanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.DataReview", b =>
                {
                    b.HasOne("orphan.Core.Model.NewOrphan", "NewOrphan")
                        .WithMany("DataReview")
                        .HasForeignKey("NewOrphanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.User", "User")
                        .WithMany("DataReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewOrphan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("orphan.Core.Model.GuardianAttachment", b =>
                {
                    b.HasOne("orphan.Core.Model.NewOrphan", "NewOrphan")
                        .WithMany("GuardianAttachment")
                        .HasForeignKey("NewOrphanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.MonthlyMovement", b =>
                {
                    b.HasOne("orphan.Core.Model.NewOrphan", "NewOrphan")
                        .WithMany("MonthlyMovement")
                        .HasForeignKey("NewOrphanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.NewOrphan", b =>
                {
                    b.HasOne("orphan.Core.Model.City", "City")
                        .WithMany("NewOrphan")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.Country", "country")
                        .WithMany("newOrphan")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.Directorate", "Directorate")
                        .WithMany("newOrphan")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.Nationality", "Nationality")
                        .WithMany("NewOrphan")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.Status", "Status")
                        .WithMany("NewOrphan")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orphan.Core.Model.Village", "Village")
                        .WithMany("newOrphan")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Directorate");

                    b.Navigation("Nationality");

                    b.Navigation("Status");

                    b.Navigation("Village");

                    b.Navigation("country");
                });

            modelBuilder.Entity("orphan.Core.Model.OrphanAttachment", b =>
                {
                    b.HasOne("orphan.Core.Model.NewOrphan", "newOrphan")
                        .WithMany("OrphanAttachment")
                        .HasForeignKey("NewOrphanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("newOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.City", b =>
                {
                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.Country", b =>
                {
                    b.Navigation("newOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.Directorate", b =>
                {
                    b.Navigation("newOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.Nationality", b =>
                {
                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.NewOrphan", b =>
                {
                    b.Navigation("AnnualReport");

                    b.Navigation("DataReview");

                    b.Navigation("GuardianAttachment");

                    b.Navigation("MonthlyMovement");

                    b.Navigation("OrphanAttachment");
                });

            modelBuilder.Entity("orphan.Core.Model.Status", b =>
                {
                    b.Navigation("NewOrphan");
                });

            modelBuilder.Entity("orphan.Core.Model.User", b =>
                {
                    b.Navigation("DataReviews");
                });

            modelBuilder.Entity("orphan.Core.Model.Village", b =>
                {
                    b.Navigation("newOrphan");
                });
#pragma warning restore 612, 618
        }
    }
}
